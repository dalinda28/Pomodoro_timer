{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/home/Documents/GitHub/Podomoro_timer/src/components/PomodoroTimer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar PomodoroTimer = function (_React$Component) {\n  _inherits(PomodoroTimer, _React$Component);\n\n  var _super = _createSuper(PomodoroTimer);\n\n  function PomodoroTimer(props) {\n    var _this;\n\n    _classCallCheck(this, PomodoroTimer);\n\n    _this = _super.call(this, props);\n\n    _this.handleTimerCompleted = function () {\n      if (_this.state.intervalType === \"Working\") {\n        _this.setState({\n          intervalType: \"Break\"\n        });\n      } else {\n        _this.setState({\n          intervalType: \"Working\"\n        });\n      }\n    };\n\n    _this.handleWorkTime = function (text) {\n      if (text >= 0) {\n        _this.setState({\n          workTime: text\n        });\n      } else {\n        alert(\"Time invalid. Setting value to default. Please enter valid time\");\n\n        _this.setState({\n          workTime: 25\n        });\n      }\n    };\n\n    _this.handleBreakTime = function (text) {\n      if (text >= 0) {\n        _this.setState({\n          breakTime: text\n        });\n      } else {\n        alert(\"Time invalid. Setting value to default. Please enter valid time\");\n\n        _this.setState({\n          breakTime: 5\n        });\n      }\n    };\n\n    _this.handleTime = function () {\n      if (_this.state.intervalType === \"Working\") {\n        return _this.state.workTime;\n      } else {\n        return _this.state.breakTime;\n      }\n    };\n\n    _this.state = {\n      workTime: 25,\n      breakTime: 5,\n      intervalType: \"Travail\"\n    };\n    return _this;\n  }\n\n  _createClass(PomodoroTimer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, \"hii\");\n    }\n  }]);\n\n  return PomodoroTimer;\n}(React.Component);\n\nexport default PomodoroTimer;","map":{"version":3,"sources":["/Users/home/Documents/GitHub/Podomoro_timer/src/components/PomodoroTimer.js"],"names":["React","PomodoroTimer","props","handleTimerCompleted","state","intervalType","setState","handleWorkTime","text","workTime","alert","handleBreakTime","breakTime","handleTime","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;IAGMC,a;;;;;AAEL,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;;AADkB,UAShBC,oBATgB,GASO,YAAM;AAC/B,UAAG,MAAKC,KAAL,CAAWC,YAAX,KAA4B,SAA/B,EACA;AACC,cAAKC,QAAL,CAAc;AACbD,UAAAA,YAAY,EAAE;AADD,SAAd;AAGA,OALD,MAOA;AACC,cAAKC,QAAL,CAAc;AACbD,UAAAA,YAAY,EAAE;AADD,SAAd;AAGA;AACD,KAtBkB;;AAAA,UAyBnBE,cAzBmB,GAyBF,UAACC,IAAD,EACjB;AACC,UAAGA,IAAI,IAAI,CAAX,EACA;AACC,cAAKF,QAAL,CAAc;AACbG,UAAAA,QAAQ,EAAED;AADG,SAAd;AAGA,OALD,MAMI;AACHE,QAAAA,KAAK,CAAC,iEAAD,CAAL;;AACA,cAAKJ,QAAL,CAAc;AACbG,UAAAA,QAAQ,EAAE;AADG,SAAd;AAGA;AACD,KAvCkB;;AAAA,UA0CnBE,eA1CmB,GA0CD,UAACH,IAAD,EAAS;AAC1B,UAAGA,IAAI,IAAI,CAAX,EACA;AACC,cAAKF,QAAL,CAAc;AACbM,UAAAA,SAAS,EAAGJ;AADC,SAAd;AAGA,OALD,MAOA;AACCE,QAAAA,KAAK,CAAC,iEAAD,CAAL;;AACA,cAAKJ,QAAL,CAAc;AACbM,UAAAA,SAAS,EAAE;AADE,SAAd;AAGA;AACD,KAxDkB;;AAAA,UA2DnBC,UA3DmB,GA2DN,YAAM;AAClB,UAAG,MAAKT,KAAL,CAAWC,YAAX,KAA4B,SAA/B,EACA;AACC,eAAO,MAAKD,KAAL,CAAWK,QAAlB;AACA,OAHD,MAKA;AACC,eAAO,MAAKL,KAAL,CAAWQ,SAAlB;AACA;AACD,KApEkB;;AAElB,UAAKR,KAAL,GAAa;AACZK,MAAAA,QAAQ,EAAE,EADE;AAEZG,MAAAA,SAAS,EAAE,CAFC;AAGZP,MAAAA,YAAY,EAAG;AAHH,KAAb;AAFkB;AAOlB;;;;WA+DE,kBAAS;AACL,aACF,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADE;AAGN;;;;EA5E0BL,KAAK,CAACc,S;;AA+ElC,eAAeb,aAAf","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet, Text, View, TextInput } from 'react-native';\n\nclass PomodoroTimer extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tworkTime: 25,\n\t\t\tbreakTime: 5,\n\t\t\tintervalType : \"Travail\",\n\t\t}\n\t}\n\n    handleTimerCompleted = () => {\n\t\tif(this.state.intervalType === \"Working\")\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tintervalType: \"Break\"\n\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tintervalType: \"Working\"\n\t\t\t})\t\n\t\t}\n\t}\n\n\t// gets triggered on change of worktimer text\n\thandleWorkTime = (text) =>\n\t{\n\t\tif(text >= 0)\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tworkTime: text\n\t\t\t})\n\t\t}\n\t\telse{\n\t\t\talert(\"Time invalid. Setting value to default. Please enter valid time\")\n\t\t\tthis.setState({\n\t\t\t\tworkTime: 25\n\t\t\t})\n\t\t}\n\t}\n\n\t// gets triggered on change of breaktimer text\n\thandleBreakTime = (text) =>{\n\t\tif(text >= 0)\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tbreakTime:  text\n\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\talert(\"Time invalid. Setting value to default. Please enter valid time\")\n\t\t\tthis.setState({\n\t\t\t\tbreakTime: 5\n\t\t\t})\n\t\t}\n\t}\n\n\t// called to set the timer's time\n\thandleTime = () => {\n\t\tif(this.state.intervalType === \"Working\")\n\t\t{\n\t\t\treturn this.state.workTime\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.state.breakTime\n\t\t}\n\t}\n    \n    render() {\n        return(\n\t\t    <View>hii</View>\n        )\n\t}\n}\n\nexport default PomodoroTimer;\n"]},"metadata":{},"sourceType":"module"}