{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/home/Documents/GitHub/Podomoro_timer/src/components/TimerButtons.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar TimerButtons = function (_React$Component) {\n  _inherits(TimerButtons, _React$Component);\n\n  var _super = _createSuper(TimerButtons);\n\n  function TimerButtons() {\n    var _this;\n\n    _classCallCheck(this, TimerButtons);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(TimerButtons, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.running === true) {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 5\n          }\n        }, React.createElement(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: this.props.pause,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 6\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 7\n          }\n        }, \"Stop\")), React.createElement(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: this.props.reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 6\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 7\n          }\n        }, \"Reset\")));\n      } else {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 5\n          }\n        }, React.createElement(TouchableOpacity, {\n          style: styles.buttonStyle,\n          onPress: this.props.play,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 6\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 7\n          }\n        }, \"Start\")));\n      }\n    }\n  }]);\n\n  return TimerButtons;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginLeft: 20,\n    justifyContent: 'space-evenly',\n    marginBottom: 20\n  },\n  buttonStyle: {\n    alignItems: \"center\",\n    backgroundColor: \"#A9CCE3\",\n    padding: 30,\n    flexDirection: \"row\",\n    borderRadius: 10\n  },\n  buttonText: {\n    color: \"black\",\n    fontSize: 25,\n    fontWeight: \"300\"\n  }\n});\nexport default TimerButtons;","map":{"version":3,"sources":["/Users/home/Documents/GitHub/Podomoro_timer/src/components/TimerButtons.js"],"names":["React","TimerButtons","state","props","running","styles","container","buttonStyle","pause","buttonText","reset","play","Component","StyleSheet","create","flex","flexDirection","marginLeft","justifyContent","marginBottom","alignItems","backgroundColor","padding","borderRadius","color","fontSize","fontWeight"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;IAGMC,Y;;;;;;;;;;;;;;;UACLC,K,GAAQ,E;;;;;;WAGR,kBAAS;AACR,UAAG,KAAKC,KAAL,CAAWC,OAAX,KAAuB,IAA1B,EACA;AACC,eACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAED,MAAM,CAACE,WAAhC;AAA6C,UAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEH,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,CADD,EAIC,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEJ,MAAM,CAACE,WAAhC;AAA6C,UAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWO,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,CAJD,CADD;AAUA,OAZD,MAcA;AACC,eACC,oBAAC,IAAD;AAAO,UAAA,KAAK,EAAEJ,MAAM,CAACC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAED,MAAM,CAACE,WAAhC;AAA6C,UAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWQ,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,CADD,CADD;AAOA;AACD;;;;EA5ByBT,KAAK,CAACY,S;;AA+BjC,IAAMP,MAAM,GAACQ,UAAU,CAACC,MAAX,CAAkB;AAC9BR,EAAAA,SAAS,EAAC;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,UAAU,EAAE,EAHH;AAITC,IAAAA,cAAc,EAAE,cAJP;AAKTC,IAAAA,YAAY,EAAE;AALL,GADoB;AAQ9BZ,EAAAA,WAAW,EAAC;AACXa,IAAAA,UAAU,EAAE,QADD;AAEXC,IAAAA,eAAe,EAAE,SAFN;AAGRC,IAAAA,OAAO,EAAE,EAHD;AAIRN,IAAAA,aAAa,EAAE,KAJP;AAKRO,IAAAA,YAAY,EAAE;AALN,GARkB;AAe7Bd,EAAAA,UAAU,EAAE;AACTe,IAAAA,KAAK,EAAE,OADE;AAETC,IAAAA,QAAQ,EAAE,EAFD;AAGTC,IAAAA,UAAU,EAAE;AAHH;AAfiB,CAAlB,CAAb;AAsBA,eAAezB,YAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n\nclass TimerButtons extends React.Component {\n\tstate = {};\n\n\t//Boutton start/stop/reset\n\trender() {\n\t\tif(this.props.running === true)\n\t\t{\n\t\t\treturn (\n\t\t\t\t<View style={styles.container}>\n\t\t\t\t\t<TouchableOpacity style={styles.buttonStyle} onPress={this.props.pause}>\n\t\t\t\t\t\t<Text style={styles.buttonText}>Stop</Text>\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t<TouchableOpacity style={styles.buttonStyle} onPress={this.props.reset}>\n\t\t\t\t\t\t<Text style={styles.buttonText}>Reset</Text>\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn(\n\t\t\t\t<View  style={styles.container}>\n\t\t\t\t\t<TouchableOpacity style={styles.buttonStyle} onPress={this.props.play}>\n\t\t\t\t\t\t<Text style={styles.buttonText}>Start</Text>\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\t}\n}\n\nconst styles=StyleSheet.create({\n\tcontainer:{\n\t\tflex: 1,\n\t\tflexDirection: \"row\" ,\n\t\tmarginLeft: 20, \n\t\tjustifyContent: 'space-evenly',\n\t\tmarginBottom: 20\n\t},\n\tbuttonStyle:{\n\t\talignItems: \"center\",\n\t\tbackgroundColor: \"#A9CCE3\",\n\t    padding: 30,\n\t    flexDirection: \"row\" ,\n\t    borderRadius: 10,\n\t}, \n\t buttonText: {\n\t    color: \"black\",\n\t    fontSize: 25,\n\t    fontWeight: \"300\",\n  \t}\n})\n\nexport default TimerButtons"]},"metadata":{},"sourceType":"module"}